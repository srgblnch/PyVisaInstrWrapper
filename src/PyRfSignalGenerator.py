#    "$Name:  $";
#    "$Header:  $";
#=============================================================================
#
# file :        PyRfSignalGenerator.py
#
# description : Python source for the PyRfSignalGenerator and its commands. 
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                PyRfSignalGenerator are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author:  $
#
# $Revision:  $
#
# $Log:  $
#
# copyleft :    Cells / Alba Synchrotron
#               Cerdanyola/Bellaterra
#               Spain
#
#=============================================================================
#          This file is generated by POGO
#    (Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#
# This file is part of Tango-ds project.
#
# Tango-ds project is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# Tango-ds project is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.
#=============================================================================

import PyTango
import sys,time
from tau.core.utils import containers
import array
import remoteCommandsRSG
#from PyTango_utils.dynamic import *

from cStringIO import StringIO #For goodly fast str concat

import threadVisa
import threading #for the frequency movement

#==================================================================
#   PyRfSignalGenerator Class Description:
#
#
#==================================================================
#     Device States Description:
#
#   DevState.ON :
#   DevState.OFF :
#   DevState.FAULT :
#   DevState.MOVING :
#==================================================================


class RfSignalGenerator(PyTango.Device_4Impl,threadVisa.ThreadVisa):

#--------- Add you global variables here --------------------------

    def read_method(self,key):
        """ will be used with the threaded dict
        """
        if key.isalpha():
            return self.ask(self.query(key))
        else:
            i = 0
            while i <= len(key):
                if key[i:].isdigit():
                    return self.ask(self.query(key[:i],key[i:]))
                    break
                i += 1


    def write_method(self,key,Value):
        """ will be used with the threaded dict
        """
        if key.isalpha():
            return self.write(self.send(key))
        else:
            i = 0
            while i <= len(key):
                if key[i:].isdigit():
                    return self.write(self.send(key[:i],key[i:]))
                    break
                i += 1

    def link2dict(self):
        try:
            #self.visaDict = containers.RankedThreadDict()
            self.idn = self.ask("*IDN?")
        except Exception,e:
            self.set_state(PyTango.DevState.FAULT)
            self.exceptionStatus(e)
            self.fatal_stream("In %s::link2dict(): IDN link2dict: %s"\
                              %(self.get_name(),e))
            return
        try:
            company,model,serial,firmware = self.idn.split(",")
            self.info_stream("\nRFSignalGenerator characteristics:\n"\
                              "\tManufacturer: %s\n"\
                              "\tModel: %s\n"\
                              "\tSerial: %s\n"\
                              "\tFirmware: %s"%(company,model,serial,firmware))
            self.instructionSet = {
                'rohde&schwarz': remoteCommandsRSG.RohdeSchwarz,
            }[company.lower()](debug=True)
        except Exception,e:
            self.error_stream("In %s::link2dict() Exception: %s"\
                              %(self.get_name(),e))
            self.set_state(PyTango.DevState.FAULT)
            self.exceptionStatus("The device has not been able to get the "\
                                 "instructions set (hint: if the manufacturer "\
                                 "is supported, check %s is exported and try "\
                                 "init this device)"%self.PyVisaDS)
            return
        try:
            _rf = self.ask(self.instructionSet.query("rf"))
            if _rf == '1':
                self.set_state(PyTango.DevState.ON)
                self.exceptionStatus("RF Output: ON.")
            else:
                self.set_state(PyTango.DevState.OFF)
                self.exceptionStatus("RF Output: OFF.")
        except Exception,e:
            self.set_state(PyTango.DevState.FAULT)
            self.exceptionStatus(e)
            self.warn_stream("In %s::link2dict(): RF status query not possible. "\
                              "Exception: %s"%(self.get_name(),e))

    def frequencyStepper(self):
        #prepare
        backup_state = self.get_state()
        self.set_state(PyTango.DevState.MOVING)

        #move
        current_pos = float(self.ask(self.instructionSet.query("frequency")))
        self.info_stream("In %s::frequencyStepper(): started the movement from"\
                         " %f"%(self.get_name(),current_pos))
        while not current_pos == self.__frequencyFinalPos:
            if current_pos > self.__frequencyFinalPos:
                if current_pos - self.__frequencyFinalPos < self.__frequencyStep:
                    current_pos = self.__frequencyFinalPos
                else: current_pos -= self.__frequencyStep
            elif current_pos < self.__frequencyFinalPos:
                if self.__frequencyFinalPos - current_pos < self.__frequencyStep:
                    current_pos = self.__frequencyFinalPos
                else: current_pos += self.__frequencyStep
            self.write(self.instructionSet.send("frequency",value=current_pos))
            self.info_stream("In %s::frequencyStepper(): moved to %f"\
                              %(self.get_name(),current_pos))
            time.sleep(self.__frequencyStepSpeed)
        self.info_stream("In %s::frequencyStepper(): finished the movement at"\
                         " %f"%(self.get_name(),current_pos))

        #close
        self.set_state(backup_state)
        self.__frequencyThread = None


#------------------------------------------------------------------
#    Device constructor
#------------------------------------------------------------------
    def __init__(self,cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.__visaScope = None
        RfSignalGenerator.init_device(self)
        

#------------------------------------------------------------------
#    Device destructor
#------------------------------------------------------------------
    def delete_device(self):
        self.info_stream("[Device delete_device method] for device %s"\
                          %self.get_name())
        self.stopThread()
        self.set_state(PyTango.DevState.UNKNOWN)
        self.exceptionStatus()


#------------------------------------------------------------------
#    Device initialization
#------------------------------------------------------------------
    def init_device(self):
        self.info_stream("In %s::init_device()"%self.get_name())
        self.set_state(PyTango.DevState.INIT)
        self.exceptionStatus()
        self.get_device_properties(self.get_device_class())
        #logger
        try:
            self.logger_maxlen = int(self.logger_maxlen)
            if self.logger_maxlen < 1: self.logger_maxlen = 1000
        except Exception,e:
            self.debug_stream("In %s::init_device(): Invalid \"logger_maxlen\" "\
                             "property value. Setting to default "\
                             "logger_maxlen=1000"%self.get_name())
            self.warn_stream("In %s::init_device(): Exception: %s"\
                              %(self.get_name(),e))
            self.logger_maxlen = 1000
        self.debug_stream("In %s::init_device(): LOGGER_maxlen property set to"\
                          " %d"%(self.get_name(),self.logger_maxlen))
        #channels => no sense here
        #PyVisaDS
        self.info_stream("In %s::init_device(): Property for the 'Remote "\
                         "PyVisa device' in set, connecting to the device %s"\
                         %(self.get_name(),self.PyVisaDS))
#        try:
#            self.PyVisaDS = str(self.PyVisaDS)
#            if self.PyVisaDS.count('/') != 2:
#                raise SyntaxError("This doesn't not seem a tango device name")
#        except Exception,e:
#            self.error_stream("In %s::init_device(): PyVisaDS not available. "\
#                              "Exception: %s"%(self.get_name(),e))
#            self.set_state(PyTango.DevState.FAULT)
#            self.exceptionStatus("The property 'PyVisaDS' is not properly set.")
#            return
        #Lock => no sense here
        #connect
        try:
            self.startThread(1)
        except Exception,e:
            self.error_stream("In %s::init_device(): Start thread not possible."\
                              " Exception: %s"%(self.get_name(),e))
            self.set_state(PyTango.DevState.FAULT)
            self.exceptionStatus(e)
            return
        #default values
        try:
            self.__frequencyStep = 0.0 #Hz
            self.__frequencyStepSpeed = 0.0 #seconds
            self.__frequencyThread = None
            # 0,0 means no steping
            
        except Exception,e:
            self.error_stream("In %s::init_device(): Expert attributes. Exception: %s"\
                       %(self.get_name(),e))
            self.set_state(PyTango.DevState.FAULT)
            self.exceptionStatus(e)
            return

        #done
        self.set_state(PyTango.DevState.ON)
        self.exceptionStatus()


#------------------------------------------------------------------
#    Always excuted hook method
#------------------------------------------------------------------
    def always_executed_hook(self):
        self.debug_stream("In %s::always_excuted_hook()"%self.get_name())

#==================================================================
#
#    PyRfSignalGenerator read/write attribute methods
#
#==================================================================
#------------------------------------------------------------------
#    Read Attribute Hardware
#------------------------------------------------------------------
    def read_attr_hardware(self,data):
        self.debug_stream("In %s::read_attr_hardware()"%self.get_name())


#------------------------------------------------------------------
#    Read Frequency attribute
#------------------------------------------------------------------
    def read_Frequency(self, attr):
        self.debug_stream("In %s::read_Frequency()"%self.get_name())
        
        #    Add your own code here
        attr.set_value(float(self.ask(self.instructionSet.query("frequency"))))
        if not self.__frequencyThread == None:
            attr.set_quality(PyTango.AttrQuality.ATTR_CHANGING)


#------------------------------------------------------------------
#    Write Frequency attribute
#------------------------------------------------------------------
    def write_Frequency(self, attr):
        self.debug_stream("In %s::write_Frequency()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("Attribute value = %s"%data)

        #    Add your own code here
        data = data[0] if type(data) is list else data
        if self.__frequencyStep == 0.0 or self.__frequencyStepSpeed == 0.0:
            self.write(self.instructionSet.send("frequency",value=data))
        else:
            self.__frequencyFinalPos = data
            if self.__frequencyThread == None:
                self.__frequencyThread = threading.Thread(target=self.frequencyStepper)
                self.__frequencyThread.setDaemon(True)
                self.__frequencyThread.start()
            else:
                self.info_stream("Avoid multiple thread creation for frequency "\
                                  "stepping...")


#---- Frequency attribute State Machine -----------------
    def is_Frequency_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.FAULT]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read FrequencyStep attribute
#------------------------------------------------------------------
    def read_FrequencyStep(self, attr):
        self.debug_stream("In %s::read_FrequencyStep()"%self.get_name())
        
        #    Add your own code here
        attr.set_value(self.__frequencyStep)


#------------------------------------------------------------------
#    Write FrequencyStep attribute
#------------------------------------------------------------------
    def write_FrequencyStep(self, attr):
        self.debug_stream("In %s::write_FrequencyStep()"%self.get_name())
        data=[]
        attr.get_write_value(data)

        #    Add your own code here
        data = data[0] if type(data) is list else data
        self.debug_stream("Attribute value = %s"%data)
        frequencyStep = float(data)
        if frequencyStep >= 0:
            self.__frequencyStep = frequencyStep
        else:
            raise Exception("Negative values has no sense") #!!


#---- FrequencyStep attribute State Machine -----------------
    def is_FrequencyStep_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.FAULT]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read FrequencyStepSpeed attribute
#------------------------------------------------------------------
    def read_FrequencyStepSpeed(self, attr):
        self.debug_stream("In %s::read_FrequencyStepSpeed()"%self.get_name())
        
        #    Add your own code here
        attr.set_value(self.__frequencyStepSpeed)


#------------------------------------------------------------------
#    Write FrequencyStepSpeed attribute
#------------------------------------------------------------------
    def write_FrequencyStepSpeed(self, attr):
        self.debug_stream("In %s::write_FrequencyStepSpeed()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("Attribute value = %s"%data)

        #    Add your own code here
        data = data[0] if type(data) is list else data
        frequencyStepSpeed = float(data)
        if frequencyStepSpeed >= 0:
            self.__frequencyStepSpeed = frequencyStepSpeed 
        else:
            raise Exception("Negative values has no sense") #!!


#---- FrequencyStepSpeed attribute State Machine -----------------
    def is_FrequencyStepSpeed_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.FAULT]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read FrequencyRangeLow attribute
#------------------------------------------------------------------
    def read_FrequencyRangeLow(self, attr):
        self.debug_stream("In %s::read_FrequencyRangeLow()"%self.get_name())
        
        #    Add your own code here
        range = self.ask(self.instructionSet.query("frequencyRangeLow"))
        attr.set_value(float(range))


##------------------------------------------------------------------
##    Write FrequencyRangeLow attribute
##------------------------------------------------------------------
#    def write_FrequencyRangeLow(self, attr):
#        self.debug_stream("In %s::write_FrequencyRangeLow()"%self.get_name())
#        data=[]
#        attr.get_write_value(data)
#        self.debug_stream("Attribute value = %s"%data)
#
#        #    Add your own code here
#        data = data[0] if type(data) is list else data
#        frequencyRangeLow = float(data)
#        self.write(self.instructionSet.send("frequencyRangeLow",value=frequencyRangeLow))


#---- FrequencyRangeLow attribute State Machine -----------------
    def is_FrequencyRangeLow_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.FAULT]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read FrequencyRangeHigh attribute
#------------------------------------------------------------------
    def read_FrequencyRangeHigh(self, attr):
        self.debug_stream("In %s::read_FrequencyRangeHigh()"%self.get_name())
        
        #    Add your own code here
        range = self.ask(self.instructionSet.query("frequencyRangeHigh"))
        attr.set_value(float(range))


##------------------------------------------------------------------
##    Write FrequencyRangeHigh attribute
##------------------------------------------------------------------
#    def write_FrequencyRangeHigh(self, attr):
#        self.debug_stream("In %s::write_FrequencyRangeHigh()"%self.get_name())
#        data=[]
#        attr.get_write_value(data)
#        self.debug_stream("Attribute value = %s"%data)
#
#        #    Add your own code here
#        data = data[0] if type(data) is list else data
#        frequencyRangeHigh = float(data)
#        self.write(self.instructionSet.send("frequencyRangeHigh",value=frequencyRangeHigh))


#---- FrequencyRangeHigh attribute State Machine -----------------
    def is_FrequencyRangeHigh_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.FAULT]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True



#------------------------------------------------------------------
#    Read PhaseContinuousFrequencyActive attribute
#------------------------------------------------------------------
    def read_PhaseContinuousFrequencyActive(self, attr):
        self.debug_stream("In %s::read_PhaseContinuousFrequencyActive()"%self.get_name())
        
        #    Add your own code here
        active = self.ask(self.instructionSet.query("phaseContinuousFrequencyActive"))
        attr.set_value(bool(active))


#------------------------------------------------------------------
#    Write PhaseContinuousFrequencyActive attribute
#------------------------------------------------------------------
    def write_PhaseContinuousFrequencyActive(self, attr):
        self.debug_stream("In %s::write_PhaseContinuousFrequencyActive()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("Attribute value = %s"%data)

        #    Add your own code here
        data = data[0] if type(data) is list else data
        active = bool(data)
        self.write(self.instructionSet.send("phaseContinuousFrequencyActive",value=active))


#---- PhaseContinuousFrequencyActive attribute State Machine -----------------
    def is_PhaseContinuousFrequencyActive_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.FAULT]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read PhaseContinuousFrequencyNarrow attribute
#------------------------------------------------------------------
    def read_PhaseContinuousFrequencyNarrow(self, attr):
        self.debug_stream("In %s::read_PhaseContinuousFrequencyNarrow()"%self.get_name())
        
        #    Add your own code here
        narrow = self.ask(self.instructionSet.query("phaseContinuousFrequencyNarrow"))
        attr.set_value(bool(narrow))


#------------------------------------------------------------------
#    Write PhaseContinuousFrequencyNarrow attribute
#------------------------------------------------------------------
    def write_PhaseContinuousFrequencyNarrow(self, attr):
        self.debug_stream("In %s::write_PhaseContinuousFrequencyNarrow()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("Attribute value = %s"%data)

        #    Add your own code here
        data = data[0] if type(data) is list else data
        narrow = bool(data)
        self.write(self.instructionSet.send("phaseContinuousFrequencyNarrow",value=narrow))


#---- PhaseContinuousFrequencyActive attribute State Machine -----------------
    def is_PhaseContinuousFrequencyActive_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.FAULT]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read PowerLevel attribute
#------------------------------------------------------------------
    def read_PowerLevel(self, attr):
        self.debug_stream("In %s::read_PowerLevel()"%self.get_name())
        
        #    Add your own code here
        attr.set_value(float(self.ask(self.instructionSet.query("powerLevel"))))


#------------------------------------------------------------------
#    Write PowerLevel attribute
#------------------------------------------------------------------
    def write_PowerLevel(self, attr):
        self.debug_stream("In %s::write_PowerLevel()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("Attribute value = %s"%data)

        #    Add your own code here
        self.write(self.instructionSet.send("powerLevel",value=data[0]))


#---- PowerLevel attribute State Machine -----------------
    def is_PowerLevel_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.FAULT]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read PowerRangeLow attribute
#------------------------------------------------------------------
    def read_PowerRangeLow(self, attr):
        self.debug_stream("In %s::read_PowerRangeLow()"%self.get_name())
        
        #    Add your own code here
        attr.set_value(float(self.ask(self.instructionSet.query("powerRangeLow"))))


##------------------------------------------------------------------
##    Write PowerRangeLow attribute
##------------------------------------------------------------------
#    def write_PowerRangeLow(self, attr):
#        self.debug_stream("In %s::write_PowerRangeLow()"%self.get_name())
#        data=[]
#        attr.get_write_value(data)
#        self.debug_stream("Attribute value = %s"%data)
#
#        #    Add your own code here
#        self.write(self.instructionSet.send("powerRangeLow",value=data[0]))


#---- PowerRangeLow attribute State Machine -----------------
    def is_PowerRangeLow_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.FAULT]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read PowerRangeHigh attribute
#------------------------------------------------------------------
    def read_PowerRangeHigh(self, attr):
        self.debug_stream("In %s::read_PowerRangeHigh()"%self.get_name())
        
        #    Add your own code here
        attr.set_value(float(self.ask(self.instructionSet.query("powerRangeHigh"))))


##------------------------------------------------------------------
##    Write PowerRangeHigh attribute
##------------------------------------------------------------------
#    def write_PowerRangeHigh(self, attr):
#        self.debug_stream("In %s::write_PowerRangeHigh()"%self.get_name())
#        data=[]
#        attr.get_write_value(data)
#        self.debug_stream("Attribute value = %s"%data)
#
#        #    Add your own code here
#        self.write(self.instructionSet.send("powerRangeHigh",value=data[0]))


#---- PowerRangeHigh attribute State Machine -----------------
    def is_PowerRangeHigh_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.FAULT]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read RfState attribute
#------------------------------------------------------------------
    def read_RfState(self, attr):
        self.debug_stream("In %s::read_RfState()"%self.get_name())
        
        #    Add your own code here
        _rf = self.ask(self.instructionSet.query("rf"))
        self.debug_stream("In %s::read_RfState() bool = %s"\
                          %(self.get_name(),_rf))
        attr.set_value(True if _rf == '1' else False)


#---- RfState attribute State Machine -----------------
    def is_RfState_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.FAULT]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read Impedancy attribute
#------------------------------------------------------------------
    def read_Impedancy(self, attr):
        self.debug_stream("In %s::read_Impedancy()"%self.get_name())
        
        #    Add your own code here
        _imped = int(self.ask(self.instructionSet.query("impedancy"))[1:])
        self.debug_stream("In %s::read_Impedancy() int = %d"\
                          %(self.get_name(),_imped))
        attr.set_value(_imped)


#---- Impedancy attribute State Machine -----------------
    def is_Impedancy_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.FAULT]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read ExtOscSrc attribute
#------------------------------------------------------------------
    def read_ExtOscSrc(self, attr):
        self.debug_stream("In %s::read_ExtOscSrc()"%self.get_name())
        
        #    Add your own code here
        oscRefSrc = self.ask(self.instructionSet.query("oscRefSrc"))
        if oscRefSrc == "INT": external = False
        else: external= True
        attr.set_value(bool(external))


#------------------------------------------------------------------
#    Write ExtOscSrc attribute
#------------------------------------------------------------------
    def write_ExtOscSrc(self, attr):
        self.debug_stream("In %s::write_ExtOscSrc()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("Attribute value = %s"%data)

        #    Add your own code here
        self.write(self.instructionSet.send("oscRefSrc",value=data[0]))


#---- ExtOscSrc attribute State Machine -----------------
    def is_ExtOscSrc_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.FAULT]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


##------------------------------------------------------------------
##    Read ExtOscFreq attribute
##------------------------------------------------------------------
#    def read_ExtOscFreq(self, attr):
#        self.debug_stream("In %s::read_ExtOscFreq()"%self.get_name())
#        
#        #    Add your own code here
#        oscRefFreq = self.ask(self.instructionSet.query("oscExtFreq"))
#        attr.set_value(float(oscRefFreq))
#
#
##------------------------------------------------------------------
##    Write ExtOscFreq attribute
##------------------------------------------------------------------
#    def write_ExtOscFreq(self, attr):
#        self.debug_stream("In %s::write_ExtOscFreq()"%self.get_name())
#        data=[]
#        attr.get_write_value(data)
#        self.debug_stream("Attribute value = %s"%data)
#
#        #    Add your own code here
#        self.write(self.instructionSet.send("oscExtFreq",value=data[0]))
#
#
##---- ExtOscFreq attribute State Machine -----------------
#    def is_ExtOscFreq_allowed(self, req_type):
#        if self.get_state() in [PyTango.DevState.FAULT]:
#            #    End of Generated Code
#            #    Re-Start of Generated Code
#            return False
#        return True


##------------------------------------------------------------------
##    Read ExtOscRf attribute
##------------------------------------------------------------------
#    def read_ExtOscRf(self, attr):
#        self.debug_stream("In %s::read_ExtOscRf()"%self.get_name())
#        
#        #    Add your own code here
#        oscRefRf = self.ask(self.instructionSet.query("oscExtRf"))
#        if oscRefRf == "OFF": external = False
#        else: external= True
#        attr.set_value(bool(external))
#
#
##------------------------------------------------------------------
##    Write ExtOscRf attribute
##------------------------------------------------------------------
#    def write_ExtOscRf(self, attr):
#        self.debug_stream("In %s::write_ExtOscRf()"%self.get_name())
#        data=[]
#        attr.get_write_value(data)
#        self.debug_stream("Attribute value = %s"%data)
#
#        #    Add your own code here
#        self.write(self.instructionSet.send("oscExtRf",value=data[0]))
#
#
##---- ExtOscRf attribute State Machine -----------------
#    def is_ExtOscRf_allowed(self, req_type):
#        if self.get_state() in [PyTango.DevState.FAULT]:
#            #    End of Generated Code
#            #    Re-Start of Generated Code
#            return False
#        return True


##------------------------------------------------------------------
##    Read ExtOscNarrow attribute
##------------------------------------------------------------------
#    def read_ExtOscNarrow(self, attr):
#        self.debug_stream("In %s::read_ExtOscNarrow()"%self.get_name())
#        
#        #    Add your own code here
#        oscRefNarrow = self.ask(self.instructionSet.query("oscExtNarrow"))
#        if oscRefNarrow == "NARR": narrow = False
#        else: narrow= True
#        attr.set_value(bool(narrow))
#
##------------------------------------------------------------------
##    Write ExtOscNarrow attribute
##------------------------------------------------------------------
#    def write_ExtOscNarrow(self, attr):
#        self.debug_stream("In %s::write_ExtOscNarrow()"%self.get_name())
#        data=[]
#        attr.get_write_value(data)
#        self.debug_stream("Attribute value = %s"%data)
#
#        #    Add your own code here
#        self.write(self.instructionSet.send("oscExtNarrow",value=data[0]))
#
#
##---- ExtOscNarrow attribute State Machine -----------------
#    def is_ExtOscNarrow_allowed(self, req_type):
#        if self.get_state() in [PyTango.DevState.FAULT]:
#            #    End of Generated Code
#            #    Re-Start of Generated Code
#            return False
#        return True


#------------------------------------------------------------------
#    Read Errors attribute
#------------------------------------------------------------------
    def read_Errors(self, attr):
        self.debug_stream("In %s::read_Errors()"%self.get_name())
        
        #    Add your own code here
        err = self.ask(self.instructionSet.query("errors"))
        err = err.split(',')
        i = 0
        strArray= []
        while i<len(err):
            strArray.append("%d:%s"%(int(err[i]),err[i+1].split("\"")[1]))
            i = i+2
        attr.set_value(strArray,len(strArray))


#---- Errors attribute State Machine -----------------
    def is_Errors_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.FAULT]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#==================================================================
#
#    PyRfSignalGenerator command methods
#
#==================================================================

#------------------------------------------------------------------
#    Reset command:
#
#    Description: 
#------------------------------------------------------------------
    def Reset(self):
        self.debug_stream("In %s::Reset()"%self.get_name())
        #    Add your own code here
        try:
            self.idn = self.ask("*RST")
        except:
            pass#TODO


##---- Reset command State Machine -----------------
#    def is_Reset_allowed(self):
#        if self.get_state() in [PyTango.DevState.OFF]:
#            #    End of Generated Code
#            #    Re-Start of Generated Code
#            return False
#        return True


#------------------------------------------------------------------
#    IDN command:
#
#    Description: 
#    argout: DevString    
#------------------------------------------------------------------
    def IDN(self):
        self.debug_stream("In %s::IDN()"%self.get_name())
        #    Add your own code here
        
        try:
            return self.idn
        except:
            self.idn = self.ask("*IDN?")
            return self.idn


#---- IDN command State Machine -----------------
    def is_IDN_allowed(self):
        if self.get_state() in [PyTango.DevState.FAULT]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    CMD command:
#
#    Description: 
#    argin:  DevString    
#    argout: DevString    
#------------------------------------------------------------------
    def CMD(self, argin):
        self.debug_stream("In %s::CMD()"%self.get_name())
        #    Add your own code here
        argin = str(argin)
        self.debug_stream("In %s::CMD(\"%s\")"%(self.get_name(),argin))
        if argin.find('?') >= 0:
            return self.ask(argin)
        else:
            self.write(argin)
            return ""


#---- CMD command State Machine -----------------
    def is_CMD_allowed(self):
        #if self.get_state() in [PyTango.DevState.FAULT]:
            #    End of Generated Code
            #    Re-Start of Generated Code
        #    return False
        return True


#------------------------------------------------------------------
#    RfOn command:
#
#    Description: 
#------------------------------------------------------------------
    def RfOn(self):
        self.debug_stream("In %s::RfOn()"%self.get_name())
        #    Add your own code here
        self.write(self.instructionSet.send("rf",value=1))
        if self.ask(self.instructionSet.query("rf")) == '1':
            self.set_state(PyTango.DevState.ON)
            self.exceptionStatus("RF Output: ON.")


#---- RfOn command State Machine -----------------
    def is_RfOn_allowed(self):
        if self.get_state() in [PyTango.DevState.ON,
                                PyTango.DevState.FAULT]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    RfOff command:
#
#    Description: 
#------------------------------------------------------------------
    def RfOff(self):
        self.debug_stream("In %s::RfOff()"%self.get_name())
        #    Add your own code here
        self.write(self.instructionSet.send("rf",value=0))
        if self.ask(self.instructionSet.query("rf")) == '0':
            self.set_state(PyTango.DevState.OFF)
            self.exceptionStatus("RF Output: OFF.")


#---- RfOff command State Machine -----------------
    def is_RfOff_allowed(self):
        if self.get_state() in [PyTango.DevState.OFF,
                                PyTango.DevState.FAULT]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


##------------------------------------------------------------------
##    AttrRecovery command:
##
##    Description: Recover from memorized the values of important attributes
##                 This command is used to restablish values after a shutdown
##                 of the intrument
##    Attributes: Frequency,PowerLevel,PhaseContinuousFrequency{Active,Narrow}
##------------------------------------------------------------------
#    def AttrRecovery(self):
#        self.debug_stream("In %s::AttrRecovery()"%self.get_name())
#        #    Add your own code here
#        multiattr = self.get_device_attr()
#        freq = multiattr.get_attr_by_name('Frequency')
#        power = multiattr.get_attr_by_name('PowerLevel')
#        active = multiattr.get_attr_by_name('PhaseContinuousFrequencyActive')
#        narrow = multiattr.get_attr_by_name('PhaseContinuousFrequencyNarrow')
#        self.write_Frequency(freq)
#        self.write_PowerLevel(power)
#        self.write_PhaseContinuousFrequencyActive(active)
#        self.write_PhaseContinuousFrequencyNarrow(narrow)
#
#
##---- AttrRecovery command State Machine -----------------
#    def is_AttrRecovery_allowed(self):
#        if self.get_state() in [PyTango.DevState.FAULT]:
#            #    End of Generated Code
#            #    Re-Start of Generated Code
#            return False
#        return True


#==================================================================
#
#    RfSignalGeneratorClass class definition
#
#==================================================================
class RfSignalGeneratorClass(PyTango.DeviceClass):

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'PyVisaDS':
            [PyTango.DevString,
            "The tango name of the PyVisaDS who is connected to the oscilloscope.",
            [] ],
        'logger_maxlen':
            [PyTango.DevLong,
            "A positive number to tune the number of characters of data to throw on the log file.",
            [] ],
        }


    #    Command definitions
    cmd_list = {
        'Reset':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        'IDN':
            [[PyTango.DevVoid, ""],
            [PyTango.DevString, ""]],
        'CMD':
            [[PyTango.DevString, ""],
            [PyTango.DevString, ""],
            {
                'Display level':PyTango.DispLevel.EXPERT,
             } ],
        'RfOn':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        'RfOff':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
#        'AttrRecovery':
#            [[PyTango.DevVoid, ""],
#            [PyTango.DevVoid, ""],
#            {
#                'Display level':PyTango.DispLevel.EXPERT,
#             } ],
        }


    #    Attribute definitions
    attr_list = {
        'Frequency':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Frequency",
                'unit':"Hz",
                'Memorized':"true",
            } ],
        'FrequencyStep':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"FrequencyStep",
                'unit':'Hz',
                'Display level':PyTango.DispLevel.EXPERT,
                'Memorized':"true",
            } ],
        'FrequencyStepSpeed':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"FrequencyStepSpeed",
                'unit':'s',
                'Display level':PyTango.DispLevel.EXPERT,
                'Memorized':"true",
            } ],
        'FrequencyRangeLow':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],#_WRITE],
            {
                'label':'Lower Frequency Range',
                'unit':'Hz',
                #'Memorized':"true",
            } ],
        'FrequencyRangeHigh':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],#_WRITE],
            {
                'label':'Higher Frequency Range',
                'unit':'Hz',
                #'Memorized':"true",
            } ],
        'PhaseContinuousFrequencyActive':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Phase Continuous Frequency Active",
                'Display level':PyTango.DispLevel.EXPERT,
                #'Memorized':"true",
            } ],
        'PhaseContinuousFrequencyNarrow':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Phase Continuous Frequency Narrow",
                'Display level':PyTango.DispLevel.EXPERT,
                #'Memorized':"true",
            } ],
        'PowerLevel':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Power Level",
                'unit':"dBm",
                'Memorized':"true",
            } ],
        'PowerRangeLow':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],#_WRITE],
            {
                'label':"Lower Power Level",
                'unit':"dBm",
                #'Memorized':"true",
            } ],
        'PowerRangeHigh':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],#_WRITE],
            {
                'label':"Higher Power Level",
                'unit':"dBm",
                #'Memorized':"true",
            } ],
        'RfState':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label':"Rf Output State",
            } ],
        'Impedancy':
            [[PyTango.DevShort,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label':"Output Impedancy",
                'unit':"Ohms",
            } ],
        'ExtOscSrc':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"External Oscilator Source",
                'description':"Switch between internal or external oscillator reference",
                'Memorized':"true",
            } ],
#        'ExtOscFreq':
#            [[PyTango.DevBoolean,
#            PyTango.SCALAR,
#            PyTango.READ_WRITE],
#            {
#                'label':"External Oscilator Frequency",
#                'description':"Informative parameter to the instrument about the external frequency reference",
#                'Memorized':"true",
#            } ],
#        'ExtOscRf':
#            [[PyTango.DevBoolean,
#            PyTango.SCALAR,
#            PyTango.READ_WRITE],
#            {
#                'label':"External Oscilator Source",
#                'description':"Determines if the RF output is siwtched off in case that external reference is missing",
#                'Memorized':"true",
#            } ],
#        'ExtOscNarrow':
#            [[PyTango.DevBoolean,
#            PyTango.SCALAR,
#            PyTango.READ_WRITE],
#            {
#                'label':"External Oscilator Synchronization Bandwitdth",
#                'description':"Synchronization bandwidth for the external reference signal",
#                'Memorized':"true",
#            } ],
        'Errors':
            [[#PyTango.DevVarLongStringArray,
              PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ,100]],
        }


#------------------------------------------------------------------
#    PyRfSignalGeneratorClass Constructor
#------------------------------------------------------------------
    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type(name);
        print "In RfSignalGeneratorClass  constructor"

#==================================================================
#
#    RfSignalGenerator class main method
#
#==================================================================
if __name__ == '__main__':
    try:
        py = PyTango.Util(sys.argv)
        py.add_TgClass(RfSignalGeneratorClass,RfSignalGenerator,'RfSignalGenerator')

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed,e:
        print '-------> Received a DevFailed exception:',e
    except Exception,e:
        print '-------> An unforeseen exception occured....',e
