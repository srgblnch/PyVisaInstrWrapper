#!/usr/bin/env python2.5

#=============================================================================
#
# file :        PyFunctionGenerator.py
#
# description : Python source for the FunctionGenerator and its commands. 
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                FunctionGenerator are implemented in this file.
#
# project :     TANGO Device Server
#
# Author: sblanch (first developer)
#
# $Revision:  $
#
# $Log:  $
#
# copyleft :    Cells / Alba Synchrotron
#               Cerdanyola/Bellaterra
#               Spain
#
#=============================================================================
#          This file is generated by POGO
#    (Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#
# This file is part of Tango-ds project.
#
# Tango-ds project is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# Tango-ds project is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.
#=============================================================================

import PyTango
import sys

import remoteCommandsAFG
import threadVisa
from cStringIO import StringIO #For goodly fast str concat

class ScalarAttributeList(PyTango.Attr):#For ScaleChN,OffsetChN,...
    pass


#==================================================================
#   FunctionGenerator Class Description:
#
#         A device server to manage a arbirary function generator. Inicially work with the Tektronix AFG3000 Series. This device uses a PyVisa-ds as a bridge.
#
#==================================================================
#     Device States Description:
#
#   DevState.ON :       Well connected to the visa device
#   DevState.OFF :      Disconnected to the visa device
#   DevState.FAULT :    Something wrong on the communication with the visa device
#   DevState.DISABLE :  The visa device has no connectivity to the instrument
#==================================================================


class FunctionGenerator(PyTango.Device_4Impl,threadVisa.ThreadVisa):

#--------- Add you global variables here --------------------------

    def link2dict(self):
        try:
            #self.visaDict = containers.RankedThreadDict()
            self.idn = self.ask("*IDN?")
        except Exception,e:
            self.set_state(PyTango.DevState.FAULT)
            self.exceptionStatus(e)
            self.fatal_stream("IDN Exception: %s"%e)
            return
        try:
            company,model,serial,firmware = self.idn.split(",")
            self.info_stream("\nAFGenerator characteristics:\n"\
                              "\tManufacturer: %s\n"\
                              "\tModel: %s\n"\
                              "\tSerial: %s\n"\
                              "\tFirmware: %s"%(company,model,serial,firmware))
            self.instructionSet = {
                'tektronix': remoteCommandsAFG.Tektronix,
            }[company.lower()](debug=True)
        except Exception,e:
            self.error_stream("In %s::link2dict() Exception: %s"\
                              %(self.get_name(),e))
            self.set_state(PyTango.DevState.FAULT)
            self.exceptionStatus("The device has not been able to get the "\
                                 "instructions set (hint: if the manufacturer "\
                                 "is supported, check %s is exported and try "\
                                 "init this device)"%self.PyVisaDS)
            return
        try:
            self.__checkOpenChannels()
            if self.LockInstrument:
                self.Lock()
                self.write(self.instructionSet.send("click",value=False))
                self.write(self.instructionSet.send("beeper",value=False))
        except Exception,e:
            self.set_state(PyTango.DevState.FAULT)
            self.exceptionStatus(e)
            self.warn_stream("In %s::link2dict() Exception %s"\
                              %(self.get_name(),e))

    def __checkOpenChannels(self):
        try:
            #query about the channels on/off status
            output = StringIO()
            for i in range(self.NumChannels):
                output.write(self.instructionSet.query("channelDisplay",\
                                                       ch=i+1)+"?;")
            _channelDisplay = self.ask(output.getvalue()).split(";")
            self.isChannelOpen = {}
            for i in range(self.NumChannels):
                self.isChannelOpen[i+1] = bool(int(_channelDisplay[i]))
        except Exception,e:
            self.warn_stream("In %s::__checkOpenChannels() Exception %s"\
                              %(self.get_name(),e))

    def listSearch(self,element,stringList):
        element = str(element)
        for i in stringList:
            if i.lower().find(element.lower()) == 0:
                return i
        return ""
    def dictSearch(self,dic,val):
        """return the key of dictionary dic given the value"""
        return [k for k, v in dic.iteritems() if v == val][0]
    
    def __runModeMask(self,letter):
        if letter.count("CW"): letter[letter.index("CW")] = '0'
        elif letter.count("SWE"): letter[letter.index("SWE")] = '1'
        number = 0
        for i in range(len(letter)):
            number += int(letter[i])<<i
        return number

#------------------------------------------------------------------
#    Device constructor
#------------------------------------------------------------------
    def __init__(self,cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.runModes = {0:'Continuous',
                         1:'Modulation,AM',
                         2:'Modulation,FM',
                         4:'Modulation,FSK',
                         8:'Modulation,PM',
                         16:'Sweep'}
        self.functionShapes = ['SINusoid','SQUare','PULSe','RAMP','PRNoise']
        FunctionGenerator.init_device(self)

#------------------------------------------------------------------
#    Device destructor
#------------------------------------------------------------------
    def delete_device(self):
        self.info_stream( "[Device delete_device method] for device %s"\
                          %self.get_name())
        try:
            self.Unlock()
            self.write(self.instructionSet.send("click",value=True))
        except Exception,e:
            self.fatal_stream("In %s::delete_device(): Ohh! %s"\
                              %(self.get_name(),e))
        self.stopThread()
        self.set_state(PyTango.DevState.OFF)
        self.exceptionStatus()


#------------------------------------------------------------------
#    Device initialization
#------------------------------------------------------------------
    def init_device(self):
        self.info_stream("In %s::init_device()"%self.get_name())
        self.set_state(PyTango.DevState.INIT)
        self.exceptionStatus()
        self.get_device_properties(self.get_device_class())
        #logger
        try:
            self.logger_maxlen = int(self.logger_maxlen)
            if self.logger_maxlen < 1: self.logger_maxlen = 1000
        except Exception,e:
            self.debug_stream("In %s::init_device():Invalid \"logger_maxlen\" "\
                              "property value. Setting to default "\
                              "logger_maxlen=1000"%self.get_name())
            self.warn_stream("In %s::init_device():Exception: %s"\
                              %(self.get_name(),e))
            self.logger_maxlen = 1000
        self.debug_stream("In %s::init_device():LOGGER_maxlen property "\
                          "set to %d"%(self.get_name(),self.logger_maxlen))
        #channels
        try:
            self.debug_stream("In %s::init_device():Configuring the "\
                              "AFGenerator device for %s Channels."\
                              %(self.get_name(),self.NumChannels))
            self.NumChannels = int(self.NumChannels)
        except Exception,e:
            self.NumChannels = 2
            self.debug_stream("In %s::init_device():Invalid \"NumChannels\" "\
                              "property value. Setting to default "\
                              "NumChannels=%d"%(self.get_name(),self.NumChannels))
            self.error_stream("In %s::init_device():Exception: %s"\
                              %(self.get_name(),e))
        #PyVisaDS
        self.info_stream("In %s::init_device():Property for the 'Remote PyVisa "\
                          "device' in set, connecting to the device %s"\
                          %(self.get_name(),self.PyVisaDS))
        #Lock
        try:
            self.LockInstrument = bool(self.LockInstrument)
            self.info_stream("In %s::init_device(): LockInstrument property "\
                              "= %s"%(self.get_name(),self.LockInstrument))
        except Exception,e:
            self.LockInstrument = True
            self.error_stream("In %s::init_device(): Invalid \"LockInstrument\" "\
                              "property value. Setting to default, True"\
                              %(self.get_name()))
        #connect
        try:
            self.startThread(1)
        except Exception,e:
            self.fatal_stream("In %s::init_device():PyVisaDS not available. "\
                              "Exception: %s"%(self.get_name(),e))
            self.set_state(PyTango.DevState.FAULT)
            self.exceptionStatus(e)
            return

        # Some attributes events come from calc_state_fn
        self.set_change_event('State', True, False)
        self.set_change_event('Status', True, False)

        #done
        self.set_state(PyTango.DevState.ON)
        self.exceptionStatus()

#------------------------------------------------------------------
#    Always excuted hook method
#------------------------------------------------------------------
    def always_executed_hook(self):
        self.debug_stream("In %s::always_excuted_hook()"%self.get_name())

#==================================================================
#
#    FunctionGenerator read/write attribute methods
#
#==================================================================
#------------------------------------------------------------------
#    Read Attribute Hardware
#------------------------------------------------------------------
    def read_attr_hardware(self,data):
        self.debug_stream("In %s::read_attr_hardware()"%self.get_name())

    def dyn_attr(self):
        self.debug_stream("In %s::dyn_attr()"%self.get_name())

        RWattributes = {#'key':[datatype,readMethod,writeMethod]
                      'Function':     [PyTango.DevString,
                                       FunctionGenerator.read_FunctionChN,
                                       FunctionGenerator.write_FunctionChN],
                      'ModulatedShape': [PyTango.DevString,
                                         FunctionGenerator.read_ModulatedShapeChN,
                                         FunctionGenerator.write_ModulatedShapeChN],
                      'Frequency':    [PyTango.DevDouble,
                                       FunctionGenerator.read_FrequencyChN,
                                       FunctionGenerator.write_FrequencyChN],
                      'ModulatedFrequency': [PyTango.DevDouble,
                                             FunctionGenerator.read_ModulatedFrequencyChN,
                                             FunctionGenerator.write_ModulatedFrequencyChN],
                      'Amplitude':    [PyTango.DevDouble,
                                       FunctionGenerator.read_AmplitudeChN,
                                       FunctionGenerator.write_AmplitudeChN],
                      'Offset':       [PyTango.DevDouble,
                                       FunctionGenerator.read_OffsetChN,
                                       FunctionGenerator.write_OffsetChN],
                      'High':         [PyTango.DevDouble,
                                       FunctionGenerator.read_HighChN,
                                       FunctionGenerator.write_HighChN],
                      'Low':          [PyTango.DevDouble,
                                       FunctionGenerator.read_LowChN,
                                       FunctionGenerator.write_LowChN],
                      'Phase':        [PyTango.DevDouble,
                                       FunctionGenerator.read_PhaseChN,
                                       FunctionGenerator.write_PhaseChN],
                      'RampSymmetry': [PyTango.DevDouble,
                                       FunctionGenerator.read_RampSymmetryChN,
                                       FunctionGenerator.write_RampSymmetryChN],
                      'PulseWidth':   [PyTango.DevDouble,
                                       FunctionGenerator.read_PulseWidthChN,
                                       FunctionGenerator.write_PulseWidthChN],
                      'PulseLead':    [PyTango.DevDouble,
                                       FunctionGenerator.read_PulseLeadChN,
                                       FunctionGenerator.write_PulseLeadChN],
                      'ModulatedDepth': [PyTango.DevDouble,
                                         FunctionGenerator.read_ModulatedDepthChN,
                                         FunctionGenerator.write_ModulatedDepthChN],
                      'ModulatedDeviation': [PyTango.DevDouble,
                                             FunctionGenerator.read_ModulatedDeviationChN,
                                             FunctionGenerator.write_ModulatedDeviationChN],
                      'ModulatedRate': [PyTango.DevDouble,
                                        FunctionGenerator.read_ModulatedRateChN,
                                        FunctionGenerator.write_ModulatedRateChN],
                      'SweepTime':    [PyTango.DevDouble,
                                       FunctionGenerator.read_SweepTimeChN,
                                       FunctionGenerator.write_SweepTimeChN],
                      'SweepHoldTime':[PyTango.DevDouble,
                                       FunctionGenerator.read_SweepHoldTimeChN,
                                       FunctionGenerator.write_SweepHoldTimeChN],
                      'SweepReturnTime':[PyTango.DevDouble,
                                       FunctionGenerator.read_SweepReturnTimeChN,
                                       FunctionGenerator.write_SweepReturnTimeChN],
                      'SweepSpacing': [PyTango.DevString,
                                       FunctionGenerator.read_SweepSpacingChN,
                                       FunctionGenerator.write_SweepSpacingChN],
                      'SweepMode':    [PyTango.DevString,
                                       FunctionGenerator.read_SweepModeChN,
                                       FunctionGenerator.write_SweepModeChN],
                      'SweepFreqStart':[PyTango.DevDouble,
                                       FunctionGenerator.read_SweepFreqStartChN,
                                       FunctionGenerator.write_SweepFreqStartChN],
                      'SweepFreqStop':[PyTango.DevDouble,
                                       FunctionGenerator.read_SweepFreqStopChN,
                                       FunctionGenerator.write_SweepFreqStopChN],
                      'SweepFreqSpan':[PyTango.DevDouble,
                                       FunctionGenerator.read_SweepFreqSpanChN,
                                       FunctionGenerator.write_SweepFreqSpanChN],
                      'SweepFreqCenter':[PyTango.DevDouble,
                                       FunctionGenerator.read_SweepFreqCenterChN,
                                       FunctionGenerator.write_SweepFreqCenterChN],
                     }
        ROattributes = {#'key':[datatype,readMethod]
                      'State':[PyTango.DevBoolean,
                               FunctionGenerator.read_StateChN],
                     }

        for i in range(1,self.NumChannels+1):
            for element in RWattributes:
                attr_name = "%sCh%d"%(element,i)
                attr = PyTango.Attr(attr_name,RWattributes[element][0],\
                                    PyTango.READ_WRITE)
                self.add_attribute(attr,RWattributes[element][1],\
                                   RWattributes[element][2])
                self.debug_stream("In %s::dyn_attr() add rw attr: %s"\
                                  %(self.get_name(),attr_name))
            for element in ROattributes:
                attr_name = "%sCh%d"%(element,i)
                attr = PyTango.Attr(attr_name,ROattributes[element][0],\
                                    PyTango.READ)
                self.add_attribute(attr,ROattributes[element][1])
                self.set_change_event(attr_name, True, False)
                self.debug_stream("In %s::dyn_attr() add ro attr: %s"\
                                  %(self.get_name(),attr_name))
            attr_name = "RunModeCh%d"%i
            attr = PyTango.Attr(attr_name,PyTango.DevString,PyTango.READ_WRITE)
            self.add_attribute(attr,self.read_RunModeChN,self.write_RunModeChN)

        attr_name = "FunctionShapes"
        attr = PyTango.SpectrumAttr(attr_name,PyTango.DevString,PyTango.READ,40)
        self.add_attribute(attr,FunctionGenerator.read_FunctionShapes)
        self.debug_stream("In %s::dyn_attr() add attr: %s"\
                          %(self.get_name(),attr_name))

        attr_name = "RunModes"
        attr = PyTango.SpectrumAttr(attr_name,PyTango.DevString,PyTango.READ,40)
        self.add_attribute(attr,FunctionGenerator.read_RunModes)
        self.debug_stream("In %s::dyn_attr() add attr: %s"\
                          %(self.get_name(),attr_name))


#------------------------------------------------------------------
#    Read click attribute
#------------------------------------------------------------------
    def read_click(self, attr):
        self.debug_stream("In %s::read_click()"%self.get_name())
        
        #    Add your own code here
        attr.set_value(bool(int(self.ask(self.instructionSet.query("click")+"?"))))


#------------------------------------------------------------------
#    Write click attribute
#------------------------------------------------------------------
    def write_click(self, attr):
        self.debug_stream("In %s::write_click()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("In %s::write_click():Attribute value = %s"\
                          %(self.get_name(),data))

        #    Add your own code here
        self.write(self.instructionSet.send("click",value=data[0]))


#------------------------------------------------------------------
#    Read beeper attribute
#------------------------------------------------------------------
    def read_beeper(self, attr):
        self.debug_stream("In %s::read_beeper()"%self.get_name())
        
        #    Add your own code here
        attr.set_value(bool(int(self.ask(self.instructionSet.query("beeper")+"?"))))


#------------------------------------------------------------------
#    Write beeper attribute
#------------------------------------------------------------------
    def write_beeper(self, attr):
        self.debug_stream("In %s::write_beeper()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("In %s::write_beeper():Attribute value = %s"\
                          %(self.get_name(),data))

        #    Add your own code here
        self.write(self.instructionSet.send("beeper",value=data[0]))


#------------------------------------------------------------------
#    Read lock attribute
#------------------------------------------------------------------
    def read_lock(self, attr):
        self.debug_stream("In %s::read_lock()"%self.get_name())
        
        #    Add your own code here
        attr.set_value(bool(int(self.ask(self.instructionSet.query("lock")+"?"))))


#------------------------------------------------------------------
#    Write lock attribute
#------------------------------------------------------------------
    def write_lock(self, attr):
        self.debug_stream("In %s::write_lock()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("In %s::write_lock():Attribute value = %s"\
                          %(self.get_name(),data))

        #    Add your own code here
        self.write(self.instructionSet.send("lock",value=data[0]))


#------------------------------------------------------------------
#    Read errorList attribute
#------------------------------------------------------------------
    def read_errorList(self, attr):
        self.debug_stream("In %s::read_errorList()"%self.get_name())
        
        #    Add your own code here
        query_list = []
        query_list.append(self.ask(self.instructionSet.query("error")))
        while not query_list[len(query_list)-1] == "0,\"No error\"" or\
              len(query_list) == 10:
            query_list.append(self.ask(self.instructionSet.query("error")))
        attr.set_value(query_list,len(query_list))


#------------------------------------------------------------------
#    Read RunModes dyn_attribute
#------------------------------------------------------------------
    def read_RunModes(self, attr):
        self.debug_stream("In %s::read_RunModes()"%self.get_name())
        
        #    Add your own code here
        _runModes = self.runModes.values()
        self.debug_stream("In %s::read_RunModes()= %s"%(self.get_name(),_runModes))
        attr.set_value(_runModes)


#------------------------------------------------------------------
#    Read RunModeChN dyn_attribute
#------------------------------------------------------------------
    def read_RunModeChN(self, attr):
        self.debug_stream("In %s::read_RunModeChN()"%self.get_name())
        
        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _runMode = self.ask(self.instructionSet.query("runMode",ch=chNum)).split(";")
        _runMode_mask = self.__runModeMask(_runMode)
        attr.set_value(self.runModes[_runMode_mask])


#------------------------------------------------------------------
#    Write RunModeChN dyn_attribute
#------------------------------------------------------------------
    def write_RunModeChN(self, attr):
        self.debug_stream("In %s::write_RunModeChN()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("In %s::write_RunModeChN():Attribute value = %s"\
                          %(self.get_name(),data))

        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        try:
            _runModes = self.dictSearch(self.runModes,data[0])
        except:
            raise Exception(ValueError,"This run mode is not allow.")
        try:
            _runMode = self.instructionSet.send("runMode",ch=chNum,value=_runModes)
        except Exception,e:
            raise Exception,e
        else:
            self.write(_runMode)


#------------------------------------------------------------------
#    Read FunctionShapes dyn_attribute
#------------------------------------------------------------------
    def read_FunctionShapes(self, attr):
        self.debug_stream("In %s::read_FunctionShapes()"%self.get_name())
        
        #    Add your own code here
        attr.set_value(self.functionShapes)


#------------------------------------------------------------------
#    Read FunctionChN dyn_attribute
#------------------------------------------------------------------
    def read_FunctionChN(self, attr):
        self.debug_stream("In %s::read_FunctionChN()"%self.get_name())
        
        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _function = self.ask(self.instructionSet.query("function",ch=chNum)+"?")
        attr.set_value(self.listSearch(_function,self.functionShapes))


#------------------------------------------------------------------
#    Write FunctionChN dyn_attribute
#------------------------------------------------------------------
    def write_FunctionChN(self, attr):
        self.debug_stream("In %s::write_FunctionChN()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("In %s::write_FunctionChN():Attribute value = %s"\
                          %(self.get_name(),data))

        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _funcShapes_search = self.listSearch(data[0],self.functionShapes)
        _function = self.instructionSet.send("function",ch=chNum,\
                                             value=_funcShapes_search)
        self.write(_function)


#------------------------------------------------------------------
#    Read ModulatedShapeChN dyn_attribute
#------------------------------------------------------------------
    def read_ModulatedShapeChN(self, attr):
        self.debug_stream("In %s::read_ModulatedShapeChN()"%self.get_name())
        
        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _runMode = self.ask(self.instructionSet.query("runMode",ch=chNum)).split(";")
        _runMode_mask = self.__runModeMask(_runMode)
        if _runMode_mask in [0,16]:
            raise Exception("Not available for this Run Mode.")
        else:
            mode={1:"am",2:"fm",4:"fsk",8:"pm",}[_runMode_mask]
        _modulatedShape = self.instructionSet.query("modulatedShape",\
                                                    ch=chNum,mode=mode)
        attr.set_value(self.listSearch(self.ask(_modulatedShape+"?"),\
                                       self.functionShapes))


#------------------------------------------------------------------
#    Write ModulatedShapeChN dyn_attribute
#------------------------------------------------------------------
    def write_ModulatedShapeChN(self, attr):
        self.debug_stream("In %s::write_ModulatedShapeChN()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("In %s::write_ModulatedShapeChN():Attribute value = %s"\
                          %(self.get_name(),data))

        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        fun = self.listSearch(data[0],self.functionShapes)
        _runMode = self.ask(self.instructionSet.query("runMode",ch=chNum)).split(";")
        _runMode_mask = self.__runModeMask(_runMode)
        if _runMode_mask in [0,16]:
            raise Exception("Not available for this Run Mode.")
        else:
            mode={1:"am",2:"fm",4:"fsk",8:"pm",}[_runMode_mask]
        _modulatedShape = self.instructionSet.send("modulatedShape",ch=chNum,\
                                                   mode=mode,value=fun)
        self.write(_modulatedShape)


#------------------------------------------------------------------
#    Read FrequencyChN dyn_attribute
#------------------------------------------------------------------
    def read_FrequencyChN(self, attr):
        self.debug_stream("In %s::read_FrequencyChN()"%self.get_name())
        
        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        attr.set_value(float(self.ask(self.instructionSet.query("frequency",\
                                                                ch=chNum)+"?")))

#------------------------------------------------------------------
#    Write FrequencyChN dyn_attribute
#------------------------------------------------------------------
    def write_FrequencyChN(self, attr):
        self.debug_stream("In %s::write_FrequencyChN()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("In %s::write_FrequencyChN():Attribute value = %s"\
                          %(self.get_name(),data))

        #    Add your own code here
        if data[0] > 25.0e6:
            raise Exception(ValueError,"Frequency upper limit is 25MHz.")
        elif data[0] < 1.0e-6:
            raise Exception(ValueError,"Frequency lower limit is 1uHz.")
        chNum = int(attr.get_name().split("Ch")[1])
        self.write(self.instructionSet.frequency_write(chNum,data[0]))


#------------------------------------------------------------------
#    Read ModulatedFrequencyChN dyn_attribute
#------------------------------------------------------------------
    def read_ModulatedFrequencyChN(self, attr):
        self.debug_stream("In %s::read_ModulatedFrequencyChN()"%self.get_name())
        
        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _runMode = self.ask(self.instructionSet.query(\
                            "runMode",ch=chNum)).split(";")
        _runMode_mask = self.__runModeMask(_runMode)
        if _runMode_mask in [0,16]:
            raise Exception("Not available for this Run Mode.")
        else:
            mode={1:"am",2:"fm",4:"fsk",8:"pm",}[_runMode_mask]
        _modulatedFrequency = self.ask(self.instructionSet.query(\
                                       "modulatedFrequency",\
                                       ch=chNum,mode=mode)+"?")
        attr.set_value(float(_modulatedFrequency))


#------------------------------------------------------------------
#    Write ModulatedFrequencyChN dyn_attribute
#------------------------------------------------------------------
    def write_ModulatedFrequencyChN(self, attr):
        self.debug_stream("In %s::write_ModulatedFrequencyChN()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("In %s::write_ModulatedFrequencyChN():Attribute value = %s"\
                          %(self.get_name(),data))

        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _runMode = self.ask(self.instructionSet.query("runMode",ch=chNum)).split(";")
        _runMode_mask = self.__runModeMask(_runMode)
        if _runMode_mask in [0,16]:
            raise Exception("Not available for this Run Mode.")
        else:
            mode={1:"am",2:"fm",4:"fsk",8:"pm",}[_runMode_mask]
        _modulatedFrequency = self.instructionSet.send("modulatedFrequency",\
                                                       ch=chNum,mode=mode,\
                                                       value=data[0])
        self.write(_modulatedFrequency)


#------------------------------------------------------------------
#    Read ModulatedDepthChN dyn_attribute
#------------------------------------------------------------------
    def read_ModulatedDepthChN(self, attr):
        self.debug_stream("In %s::read_ModulatedDepthChN()"%self.get_name())
        
        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _runMode = self.ask(self.instructionSet.query("runMode",ch=chNum)).split(";")
        _runMode_mask = self.__runModeMask(_runMode)
        if _runMode_mask == 1: #means AM
            mode = "am"#mode={1:"am",2:"fm",4:"fsk",8:"pm",}[_runMode_mask]
            _modulatedDepth = self.ask(self.instructionSet.query("modulatedDepth",\
                                                                 ch=chNum,\
                                                                 mode=mode)+"?")
            attr.set_value(float(_modulatedDepth))
        else:
            raise Exception("Not available for this Run Mode.")


#------------------------------------------------------------------
#    Write ModulatedDepthChN dyn_attribute
#------------------------------------------------------------------
    def write_ModulatedDepthChN(self, attr):
        self.debug_stream("In %s::write_ModulatedDepthChN()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("In %s::write_ModulatedDepthChN():Attribute value = %s"\
                          %(self.get_name(),data))

        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _runMode = self.ask(self.instructionSet.query("runMode",ch=chNum)).split(";")
        _runMode_mask = self.__runModeMask(_runMode)
        if _runMode_mask == 1: #means AM
            mode = "am"#mode={1:"am",2:"fm",4:"fsk",8:"pm",}[_runMode_mask]
            _modulatedDepth = self.instructionSet.send("modulatedDepth",\
                                                       ch=chNum,mode=mode,\
                                                       value=data[0])
            self.write(_modulatedDepth)
        else:
            raise Exception("Not available for this Run Mode.")


#------------------------------------------------------------------
#    Read ModulatedDeviationChN dyn_attribute
#------------------------------------------------------------------
    def read_ModulatedDeviationChN(self, attr):
        self.debug_stream("In %s::read_ModulatedDeviationChN()"%self.get_name())
        
        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _runMode = self.ask(self.instructionSet.query("runMode",ch=chNum)).split(";")
        _runMode_mask = self.__runModeMask(_runMode)
        if _runMode_mask in [2,8]: #mean FM or PM
            mode={1:"am",2:"fm",4:"fsk",8:"pm",}[_runMode_mask]
            _modulatedDeviation = self.ask(self.instructionSet.query(\
                                           "modulatedDeviation",ch=chNum,\
                                           mode=mode)+"?")
            attr.set_value(float(_modulatedDeviation))
        else:
            raise Exception("Not available for this Run Mode.")


#------------------------------------------------------------------
#    Write ModulatedDeviationChN dyn_attribute
#------------------------------------------------------------------
    def write_ModulatedDeviationChN(self, attr):
        self.debug_stream("In %s::write_ModulatedDeviationChN()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("In %s::write_ModulatedDeviationChN():Attribute value = %s"\
                          %(self.get_name(),data))

        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _runMode = self.ask(self.instructionSet.query("runMode",ch=chNum)).split(";")
        _runMode_mask = self.__runModeMask(_runMode)
        if _runMode_mask in [2,8]: #means FM or PM
            mode={1:"am",2:"fm",4:"fsk",8:"pm",}[_runMode_mask]
            _modulatedDeviation = self.instructionSet.send("modulatedDeviation",\
                                                          ch=chNum,mode=mode,\
                                                          value=data[0])
            self.write(_modulatedDeviation)
        else:
            raise Exception("Not available for this Run Mode.")


#------------------------------------------------------------------
#    Read ModulatedRateChN dyn_attribute
#------------------------------------------------------------------
    def read_ModulatedRateChN(self, attr):
        self.debug_stream("In %s::read_ModulatedRateChN()"%self.get_name())
        
        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _runMode = self.ask(self.instructionSet.query("runMode",ch=chNum)).split(";")
        _runMode_mask = self.__runModeMask(_runMode)
        if _runMode_mask == 4: #mean FSK
            mode = "fsk"#mode={1:"am",2:"fm",4:"fsk",8:"pm",}[_runMode_mask]
            _modulatedRate = self.ask(self.instructionSet.query("modulatedRate",\
                                                                ch=chNum,\
                                                                mode=mode)+"?")
            attr.set_value(float(_modulatedRate))
        else:
            raise Exception("Not available for this Run Mode.")


#------------------------------------------------------------------
#    Write ModulatedRateChN dyn_attribute
#------------------------------------------------------------------
    def write_ModulatedRateChN(self, attr):
        self.debug_stream("In %s::write_ModulatedRateChN()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("In %s::write_ModulatedRateChN():Attribute value = %s"\
                          %(self.get_name(),data))

        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _runMode = self.ask(self.instructionSet.query("runMode",ch=chNum)).split(";")
        _runMode_mask = self.__runModeMask(_runMode)
        if _runMode_mask == 4: #means FSK
            mode="fsk"#mode={1:"am",2:"fm",4:"fsk",8:"pm",}[_runMode_mask]
            _modulatedRate = self.instructionSet.send("modulatedRate",ch=chNum,\
                                                      mode=mode,value=data[0])
            self.write(_modulatedRate)
        else:
            raise Exception("Not available for this Run Mode.")


#------------------------------------------------------------------
#    Read AmplitudeChN dyn_attribute
#------------------------------------------------------------------
    def read_AmplitudeChN(self, attr):
        self.debug_stream("In %s::read_AmplitudeChN()"%self.get_name())
        
        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _amplitude = self.ask(self.instructionSet.query("amplitude",ch=chNum)+"?")
        attr.set_value(float(_amplitude))

#------------------------------------------------------------------
#    Write AmplitudeChN dyn_attribute
#------------------------------------------------------------------
    def write_AmplitudeChN(self, attr):
        self.debug_stream("In %s::write_AmplitudeChN()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("In %s::write_AmplitudeChN():Attribute value = %s"\
                          %(self.get_name(),data))

        #    Add your own code here
        if data[0] > 10:
            raise Exception(ValueError,"Amplitude upper limit is 10V.")
        elif data[0] < 0.01:
            raise Exception(ValueError,"Amplitude lower limit is 10mV.")
        chNum = int(attr.get_name().split("Ch")[1])
        self.write(self.instructionSet.amplitude_write(chNum,data[0]))


#------------------------------------------------------------------
#    Read OffsetChN dyn_attribute
#------------------------------------------------------------------
    def read_OffsetChN(self, attr):
        self.debug_stream("In %s::read_OffsetChN()"%self.get_name())
        
        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _offset = self.ask(self.instructionSet.query("offset",ch=chNum)+"?")
        attr.set_value(float(_offset))

#------------------------------------------------------------------
#    Write OffsetChN dyn_attribute
#------------------------------------------------------------------
    def write_OffsetChN(self, attr):
        self.debug_stream("In %s::write_OffsetChN()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("In %s::write_OffsetChN():Attribute value = %s"\
                          %(self.get_name(),data))

        #    Add your own code here
        if data[0] > 4.995:
            raise Exception(ValueError,"Offset upper limit is 4.995V.")
        elif data[0] < -4.995:
            raise Exception(ValueError,"Offset lower limit is -4.995V.")
        chNum = int(attr.get_name().split("Ch")[1])
        self.write(self.instructionSet.offset_write(chNum,data[0]))


#------------------------------------------------------------------
#    Read HighChN dyn_attribute
#------------------------------------------------------------------
    def read_HighChN(self, attr):
        self.debug_stream("In %s::read_HighChN()"%self.get_name())
        
        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _high = self.ask(self.instructionSet.query("high",ch=chNum)+"?")
        attr.set_value(float(_high))

#------------------------------------------------------------------
#    Write HighChN dyn_attribute
#------------------------------------------------------------------
    def write_HighChN(self, attr):
        self.debug_stream("In %s::write_HighChN()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("In %s::write_HighChN():Attribute value = %s"\
                          %(self.get_name(),data))

        #    Add your own code here
        if data[0] > 5:
            raise Exception(ValueError,"High upper limit is 5V.")
        elif data[0] < -4.990:
            raise Exception(ValueError,"High lower limit is -4.990V.")
        chNum = int(attr.get_name().split("Ch")[1])
        self.write(self.instructionSet.high_write(chNum,data[0]))


#------------------------------------------------------------------
#    Read LowChN dyn_attribute
#------------------------------------------------------------------
    def read_LowChN(self, attr):
        self.debug_stream("In %s::read_LowChN()"%self.get_name())
        
        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _low = self.ask(self.instructionSet.query("low",ch=chNum)+"?")
        attr.set_value(float(_low))

#------------------------------------------------------------------
#    Write LowChN dyn_attribute
#------------------------------------------------------------------
    def write_LowChN(self, attr):
        self.debug_stream("In %s::write_LowChN()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("In %s::write_LowChN():Attribute value = %s"\
                          %(self.get_name(),data))

        #    Add your own code here
        if data[0] > 4.990:
            raise Exception(ValueError,"Low upper limit is 4.990V.")
        elif data[0] < -5:
            raise Exception(ValueError,"Low lower limit is -5V.")
        chNum = int(attr.get_name().split("Ch")[1])
        self.write(self.instructionSet.low_write(chNum,data[0]))


#------------------------------------------------------------------
#    Read PhaseChN dyn_attribute
#------------------------------------------------------------------
    def read_PhaseChN(self, attr):
        self.debug_stream("In %s::read_PhaseChN()"%self.get_name())
        
        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _phase = self.ask(self.instructionSet.query("phase",ch=chNum)+"?")
        attr.set_value(float(_phase))

#------------------------------------------------------------------
#    Write PhaseChN dyn_attribute
#------------------------------------------------------------------
    def write_PhaseChN(self, attr):
        self.debug_stream("In %s::write_PhaseChN()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("In %s::write_PhaseChN():Attribute value = %s"\
                          %(self.get_name(),data))

        #    Add your own code here
        if data[0] > 180:
            raise Exception(ValueError,"Phase upper limit is 180 degrees.")
        elif data[0] < -180:
            raise Exception(ValueError,"Phase lower limit is -180 degrees")
        chNum = int(attr.get_name().split("Ch")[1])
        self.write(self.instructionSet.phase_write(chNum,data[0]))


#------------------------------------------------------------------
#    Read RampSymmetryChN dyn_attribute
#------------------------------------------------------------------
    def read_RampSymmetryChN(self, attr):
        self.debug_stream("In %s::read_RampSymmetryChN()"%self.get_name())
        
        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _function = self.ask(self.instructionSet.query("function",ch=chNum)+"?")
        _function_search = self.listSearch(_function,self.functionShapes)
        if _function_search == 'RAMP':
            _rampSymmetry = self.ask(self.instructionSet.query("rampSymmetry",\
                                                               ch=chNum)+"?")
            attr.set_value(float(_rampSymmetry))
        else:
            raise Exception("Not available for this Function type")

#------------------------------------------------------------------
#    Write RampSymmetryChN dyn_attribute
#------------------------------------------------------------------
    def write_RampSymmetryChN(self, attr):
        self.debug_stream("In %s::write_RampSymmetryChN()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("In %s::write_RampSymmetryChN():Attribute value = %s"\
                          %(self.get_name(),data))

        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _function = self.ask(self.instructionSet.query("function",ch=chNum)+"?")
        _function_search = self.listSearch(_function,self.functionShapes)
        if _function_search == 'RAMP':
            if data[0] > 100:
                raise Exception(ValueError,"Ramp symmetry upper limit is 100.")
            elif data[0] < 0:
                raise Exception(ValueError,"Ramp symmetry lower limit is 1.")
            self.write(self.instructionSet.rampSymmetry_write(chNum,data[0]))
        else:
            raise Exception("Not available for this Function type")


#------------------------------------------------------------------
#    Read PulseWidthChN dyn_attribute
#------------------------------------------------------------------
    def read_PulseWidthChN(self, attr):
        self.debug_stream("In %s::read_PulseWidthChN()"%self.get_name())
        
        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _function = self.ask(self.instructionSet.query("function",ch=chNum)+"?")
        _function_search = self.listSearch(_function,self.functionShapes)
        if _function_search == 'PULSe':
            _pulseWidth = self.ask(self.instructionSet.query("pulseWidth",\
                                                             ch=chNum)+"?")
            attr.set_value(float(_pulseWidth))
        else:
            raise Exception("Not available for this Function type")

#------------------------------------------------------------------
#    Write PulseWidthChN dyn_attribute
#------------------------------------------------------------------
    def write_PulseWidthChN(self, attr):
        self.debug_stream("In %s::write_PulseWidthChN()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("In %s::write_PulseWidthChN():Attribute value = %s"\
                          %(self.get_name(),data))

        #    Add your own code here
        
        chNum = int(attr.get_name().split("Ch")[1])
        _function = self.ask(self.instructionSet.query("function",ch=chNum)+"?")
        _function_search = self.listSearch(_function,self.functionShapes)
        if _function_search == 'PULSe':
            if data[0] > 100:
                raise Exception(ValueError,"Pulse width upper limit is 100.")
            elif data[0] < 0:
                raise Exception(ValueError,"Pulse width lower limit is 1.")
            self.write(self.instructionSet.send("pulseWidth",ch=chNum,\
                                                value=data[0]))
        else:
            raise Exception("Not available for this Function type")


#------------------------------------------------------------------
#    Read PulseLeadChN dyn_attribute
#------------------------------------------------------------------
    def read_PulseLeadChN(self, attr):
        self.debug_stream("In %s::read_PulseLeadChN()"%self.get_name())
        
        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _function = self.ask(self.instructionSet.query("function",ch=chNum)+"?")
        _function_search = self.listSearch(_function,self.functionShapes)
        if _function_search == 'PULSe':
            _pulseLead = self.ask(self.instructionSet.query("pulseLead",\
                                                            ch=chNum)+"?")
            attr.set_value(float(_pulseLead))
        else:
            raise Exception("Not available for this Function type")

#------------------------------------------------------------------
#    Write PulseLeadChN dyn_attribute
#------------------------------------------------------------------
    def write_PulseLeadChN(self, attr):
        self.debug_stream("In %s::write_PulseLeadChN()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("In %s::write_PulseLeadChN():Attribute value = %s"\
                          %(self.get_name(),data))

        #    Add your own code here
        
        chNum = int(attr.get_name().split("Ch")[1])
        _function = self.ask(self.instructionSet.query("function",ch=chNum)+"?")
        _function_search = self.listSearch(_function,self.functionShapes)
        if _function_search == 'PULSe':
#            if data[0] > 100:
#                raise Exception(ValueError,"Pulse width upper limit is 100.")
#            elif data[0] < 0:
#                raise Exception(ValueError,"Pulse width lower limit is 1.")
            self.write(self.instructionSet.send("pulseLead",ch=chNum,\
                                                value=data[0]))
        else:
            raise Exception("Not available for this Function type")


#------------------------------------------------------------------
#    Read PulseTrailChN dyn_attribute
#------------------------------------------------------------------
    def read_PulseTrailChN(self, attr):
        self.debug_stream("In %s::read_PulseTrailChN()"%self.get_name())
        
        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _function = self.ask(self.instructionSet.query("function",ch=chNum)+"?")
        _function_search = self.listSearch(_function,self.functionShapes)
        if _function_search == 'PULSe':
            _pulseTrail = self.ask(self.instructionSet.query("pulseTrail",\
                                                             ch=chNum)+"?")
            attr.set_value(float(_pulseTrail))
        else:
            raise Exception("Not available for this Function type")

#------------------------------------------------------------------
#    Write PulseTrailChN dyn_attribute
#------------------------------------------------------------------
    def write_PulseTrailChN(self, attr):
        self.debug_stream("In %s::write_PulseTrailChN()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("In %s::write_PulseTrailChN():Attribute value = %s"\
                          %(self.get_name(),data))

        #    Add your own code here
        
        chNum = int(attr.get_name().split("Ch")[1])
        _function = self.ask(self.instructionSet.query("function",ch=chNum)+"?")
        _function_search = self.listSearch(_function,self.functionShapes)
        if function_search == 'PULSe':
#            if data[0] > 100:
#                raise Exception(ValueError,"Pulse width upper limit is 100.")
#            elif data[0] < 0:
#                raise Exception(ValueError,"Pulse width lower limit is 1.")
            self.write(self.instructionSet.send("pulseTrail",ch=chNum,\
                                                value=data[0]))
        else:
            raise Exception("Not available for this Function type")


#------------------------------------------------------------------
#    Read SweepTimeChN dyn_attribute
#------------------------------------------------------------------
    def read_SweepTimeChN(self, attr):
        self.debug_stream("In %s::read_SweepTimeChN()"%self.get_name())
        
        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _sweepTime = self.ask(self.instructionSet.query("sweepTime",ch=chNum)+"?")
        attr.set_value(float(_sweepTime))

#------------------------------------------------------------------
#    Write SweepTimeChN dyn_attribute
#------------------------------------------------------------------
    def write_SweepTimeChN(self, attr):
        self.debug_stream("In %s::write_SweepTimeChN()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("In %s::write_SweepTimeChN():Attribute value = %s"\
                          %(self.get_name(),data))

        #    Add your own code here
        
        chNum = int(attr.get_name().split("Ch")[1])
        self.write(self.instructionSet.send("sweepTime",ch=chNum,value=data[0]))


#------------------------------------------------------------------
#    Read SweepHoldTimeChN dyn_attribute
#------------------------------------------------------------------
    def read_SweepHoldTimeChN(self, attr):
        self.debug_stream("In %s::read_SweepHoldTimeChN()"%self.get_name())
        
        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _sweepHtime = self.ask(self.instructionSet.query("sweepHtime",ch=chNum)+"?")
        attr.set_value(float(_sweepHtime))

#------------------------------------------------------------------
#    Write SweepHoldTimeChN dyn_attribute
#------------------------------------------------------------------
    def write_SweepHoldTimeChN(self, attr):
        self.debug_stream("In %s::write_SweepHoldTimeChN()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("In %s::write_SweepHoldTimeChN():Attribute value "\
                          "= %s"%(self.get_name(),data))

        #    Add your own code here
        
        chNum = int(attr.get_name().split("Ch")[1])
        self.write(self.instructionSet.send("sweepHtime",ch=chNum,value=data[0]))


#------------------------------------------------------------------
#    Read SweepReturnTimeChN dyn_attribute
#------------------------------------------------------------------
    def read_SweepReturnTimeChN(self, attr):
        self.debug_stream("In %s::read_SweepReturnTimeChN()"%self.get_name())
        
        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _sweepRtime = self.ask(self.instructionSet.query("sweepRtime",ch=chNum)+"?")
        attr.set_value(float(_sweepRtime))

#------------------------------------------------------------------
#    Write SweepReturnTimeChN dyn_attribute
#------------------------------------------------------------------
    def write_SweepReturnTimeChN(self, attr):
        self.debug_stream("In %s::write_SweepReturnTimeChN()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("In %s::write_SweepReturnTimeChN():Attribute value "\
                          "= %s"%(self.get_name(),data))

        #    Add your own code here
        
        chNum = int(attr.get_name().split("Ch")[1])
        self.write(self.instructionSet.send("sweepRtime",ch=chNum,value=data[0]))


#------------------------------------------------------------------
#    Read SweepSpacingChN dyn_attribute
#------------------------------------------------------------------
    def read_SweepSpacingChN(self, attr):
        self.debug_stream("In %s::read_SweepSpacingChN()"%self.get_name())
        
        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _sweepSpacing = self.ask(self.instructionSet.query("sweepSpacing",ch=chNum)+"?")
        attr.set_value(str(_sweepSpacing))

#------------------------------------------------------------------
#    Write SweepSpacingChN dyn_attribute
#------------------------------------------------------------------
    def write_SweepSpacingChN(self, attr):
        self.debug_stream("In %s::write_SweepSpacingChN()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("In %s::write_SweepSpacingChN():Attribute value = %s"\
                          %(self.get_name(),data))

        #    Add your own code here
        
        chNum = int(attr.get_name().split("Ch")[1])
        try:
            self.write(self.instructionSet.send("sweepSpacing",ch=chNum,\
                                                value=data[0]))
        except Exception,e:
            raise Exception(e,"'lin','linear','log','logarithmic' accepted.")


#------------------------------------------------------------------
#    Read SweepModeChN dyn_attribute
#------------------------------------------------------------------
    def read_SweepModeChN(self, attr):
        self.debug_stream("In %s::read_SweepModeChN()"%self.get_name())
        
        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _sweepMode = self.ask(self.instructionSet.query("sweepMode",ch=chNum)+"?")
        attr.set_value(str(_sweepMode))

#------------------------------------------------------------------
#    Write SweepModeChN dyn_attribute
#------------------------------------------------------------------
    def write_SweepModeChN(self, attr):
        self.debug_stream("In %s::write_SweepModeChN()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("In %s::write_SweepModeChN():Attribute value = %s"\
                          %(self.get_name(),data))

        #    Add your own code here
        
        chNum = int(attr.get_name().split("Ch")[1])
        try:
            self.write(self.instructionSet.send("sweepMode",ch=chNum,\
                                                value=data[0]))
        except Exception,e:
            raise Exception(e,"'auto' or 'man' accepted")


#------------------------------------------------------------------
#    Read SweepFreqStartChN dyn_attribute
#------------------------------------------------------------------
    def read_SweepFreqStartChN(self, attr):
        self.debug_stream("In %s::read_SweepFreqStartChN()"%self.get_name())
        
        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _sweepFreqStart = self.ask(self.instructionSet.query("sweepFreqStart",\
                                                             ch=chNum)+"?")
        attr.set_value(float(_sweepFreqStart))

#------------------------------------------------------------------
#    Write SweepFreqStartChN dyn_attribute
#------------------------------------------------------------------
    def write_SweepFreqStartChN(self, attr):
        self.debug_stream("In %s::write_SweepFreqStartChN()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("In %s::write_SweepFreqStartChN():Attribute value "\
                          "= %s"%(self.get_name(),data))

        #    Add your own code here
        
        chNum = int(attr.get_name().split("Ch")[1])
        self.write(self.instructionSet.send("sweepFreqStart",ch=chNum,\
                                            value=data[0]))


#------------------------------------------------------------------
#    Read SweepFreqStopChN dyn_attribute
#------------------------------------------------------------------
    def read_SweepFreqStopChN(self, attr):
        self.debug_stream("In %s::read_SweepFreqStopChN()"%self.get_name())
        
        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _sweepFreqStop = self.ask(self.instructionSet.query("sweepFreqStop",\
                                                            ch=chNum)+"?")
        attr.set_value(float(_sweepFreqStop))

#------------------------------------------------------------------
#    Write SweepFreqStopChN dyn_attribute
#------------------------------------------------------------------
    def write_SweepFreqStopChN(self, attr):
        self.debug_stream("In %s::write_SweepFreqStopChN()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("In %s::write_SweepFreqStopChN():Attribute value "\
                          "= %s"%(self.get_name(),data))

        #    Add your own code here
        
        chNum = int(attr.get_name().split("Ch")[1])
        self.write(self.instructionSet.send("sweepFreqStop",ch=chNum,\
                                            value=data[0]))


#------------------------------------------------------------------
#    Read SweepFreqSpanChN dyn_attribute
#------------------------------------------------------------------
    def read_SweepFreqSpanChN(self, attr):
        self.debug_stream("In %s::read_SweepFreqSpanChN()"%self.get_name())
        
        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _sweepFreqSpan = self.ask(self.instructionSet.query("sweepFreqSpan",\
                                                            ch=chNum)+"?")
        attr.set_value(float(_sweepFreqSpan))

#------------------------------------------------------------------
#    Write SweepFreqSpanChN dyn_attribute
#------------------------------------------------------------------
    def write_SweepFreqSpanChN(self, attr):
        self.debug_stream("In %s::write_SweepFreqSpanChN()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("In %s::write_SweepFreqSpanChN():Attribute value "\
                          "= %s"%(self.get_name(),data))

        #    Add your own code here
        
        chNum = int(attr.get_name().split("Ch")[1])
        self.write(self.instructionSet.send("sweepFreqSpan",ch=chNum,\
                                            value=data[0]))


#------------------------------------------------------------------
#    Read SweepFreqCenterChN dyn_attribute
#------------------------------------------------------------------
    def read_SweepFreqCenterChN(self, attr):
        self.debug_stream("In %s::read_SweepFreqCenterChN()"%self.get_name())
        
        #    Add your own code here
        chNum = int(attr.get_name().split("Ch")[1])
        _sweepFreqCenter = self.ask(self.instructionSet.query("sweepFreqCenter",\
                                                              ch=chNum)+"?")
        attr.set_value(float(_sweepFreqCenter))

#------------------------------------------------------------------
#    Write SweepFreqCenterChN dyn_attribute
#------------------------------------------------------------------
    def write_SweepFreqCenterChN(self, attr):
        self.debug_stream("In %s::write_SweepFreqCenterChN()"%self.get_name())
        data=[]
        attr.get_write_value(data)
        self.debug_stream("In %s::write_SweepFreqCenterChN():Attribute value "\
                          "= %s"%(self.get_name(),data))

        #    Add your own code here
        
        chNum = int(attr.get_name().split("Ch")[1])
        self.write(self.instructionSet.send("sweepFreqCenter",ch=chNum,\
                                            value=data[0]))


#------------------------------------------------------------------
#    Read StateChN attribute
#------------------------------------------------------------------
    def read_StateChN(self, attr):
        self.debug_stream("In %s::read_StateChN()"%self.get_name())
        
        #    Add your own code here
        #self.info_stream(attr.get_name())
        #self.info_stream(attr.get_name().split("Ch"))
        chNum = int(attr.get_name().split("Ch")[1])
        _channelDisplay = bool(int(self.ask(self.instructionSet.query("channelDisplay",\
                                                          ch=chNum)+"?")))
        self.isChannelOpen[chNum] = _channelDisplay
        attr.set_value(_channelDisplay)


#==================================================================
#
#    FunctionGenerator command methods
#
#==================================================================

#------------------------------------------------------------------
#    Reset command:
#
#    Description: 
#------------------------------------------------------------------
    def Reset(self):
        self.debug_stream("In %s::Reset()"%self.get_name())
        #    Add your own code here
        self.stopThread()
        self.__visaScope = None
        self.startThread(1)
        self.ask("*RST")
        if not self.getVisaDS_state() == PyTango.DevState.ON:
            self.setVisaDS_reset()


#---- Reset command State Machine -----------------
    def is_Reset_allowed(self):
        if self.get_state() in [PyTango.DevState.ON,
                                PyTango.DevState.OFF,
                                PyTango.DevState.DISABLE]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Start command:
#
#    Description: 
#------------------------------------------------------------------
    def Start(self):
        self.debug_stream("In %s::Start()"%self.get_name())
        #    Add your own code here
        self.startThread(1)
        self.__checkOpenChannels()
        self.set_state(PyTango.DevState.ON)
        self.exceptionStatus()


#---- Start command State Machine -----------------
    def is_Start_allowed(self):
        if self.get_state() in [PyTango.DevState.ON,
                                PyTango.DevState.FAULT,
                                PyTango.DevState.DISABLE]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Stop command:
#
#    Description: 
#------------------------------------------------------------------
    def Stop(self):
        self.debug_stream("In %s::Stop()"%self.get_name())
        #    Add your own code here
        self.stopThread()
        self.set_state(PyTango.DevState.OFF)
        self.exceptionStatus()


#---- Stop command State Machine -----------------
    def is_Stop_allowed(self):
        if self.get_state() in [PyTango.DevState.OFF,
                                PyTango.DevState.FAULT]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Lock command:
#
#    Description: 
#------------------------------------------------------------------
    def Lock(self):
        self.debug_stream("In %s::Lock()"%self.get_name())
        #    Add your own code here
        self.write(self.instructionSet.send("lock",value=True))


#---- Lock command State Machine -----------------
    def is_Lock_allowed(self):
        if self.get_state() in [PyTango.DevState.OFF,
                                PyTango.DevState.FAULT]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Unlock command:
#
#    Description: 
#------------------------------------------------------------------
    def Unlock(self):
        self.debug_stream("In %s::Unlock()"%self.get_name())
        #    Add your own code here
        self.write(self.instructionSet.send("lock",value=False))


#---- Unlock command State Machine -----------------
    def is_Unlock_allowed(self):
        if self.get_state() in [PyTango.DevState.OFF,
                                PyTango.DevState.FAULT]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    IDN command:
#
#    Description: 
#    argout: DevString    
#------------------------------------------------------------------
    def IDN(self):
        self.debug_stream("In %s::IDN()"%self.get_name())
        #    Add your own code here
        try:
            return self.idn
        except:
            self.idn = self.ask("*IDN?")
            return self.idn


#---- IDN command State Machine -----------------
    def is_IDN_allowed(self):
        if self.get_state() in [PyTango.DevState.OFF,
                                PyTango.DevState.FAULT,
                                PyTango.DevState.DISABLE]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    CMD command:
#
#    Description: 
#    argin:  DevString    
#    argout: DevString    
#------------------------------------------------------------------
    def CMD(self, argin):
        self.debug_stream("In %s::CMD()"%self.get_name())
        #    Add your own code here
        argin = str(argin)
        self.debug_stream("In %s::CMD(\"%s\")"%(self.get_name(),argin))
        if argin.find('?') >= 0:
            return self.ask(argin)
        else:
            self.write(argin)
            return ""


#---- CMD command State Machine -----------------
    def is_CMD_allowed(self):
        if self.get_state() in [PyTango.DevState.OFF,
                                PyTango.DevState.FAULT,
                                PyTango.DevState.DISABLE]:
            #    End of Generated Code
            if self.get_state() == PyTango.DevState.FAULT:
                self.force_reconnect()
            if self.get_state() == PyTango.DevState.ON:
                return True
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    OpenCh command:
#
#    Description: 
#    argin:  DevShort    
#------------------------------------------------------------------
    def OpenCh(self, argin):
        self.debug_stream("In %s::OpenCh()"%self.get_name())
        #    Add your own code here
        self.write(self.instructionSet.query("channelDisplay",ch=argin)+" ON")
        _channelDisplay = self.ask(self.instructionSet.query("channelDisplay",\
                                                    ch=argin)+"?")
        isChannelOpen = bool(int(_channelDisplay))
        self.isChannelOpen[int(argin)] = isChannelOpen
        self.push_change_event('StateCh%s'%argin,isChannelOpen)


#---- OpenCh command State Machine -----------------
    def is_OpenCh_allowed(self):
        if self.get_state() in [PyTango.DevState.OFF,
                                PyTango.DevState.FAULT,
                                PyTango.DevState.DISABLE]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    CloseCh command:
#
#    Description: 
#    argin:  DevShort    
#------------------------------------------------------------------
    def CloseCh(self, argin):
        self.debug_stream("In %s::CloseCh()"%self.get_name())
        #    Add your own code here
        self.write(self.instructionSet.query("channelDisplay",ch=argin)+" OFF")
        _channelDisplay = self.ask(self.instructionSet.query("channelDisplay",\
                                                    ch=argin)+"?")
        isChannelOpen = bool(int(_channelDisplay))
        self.isChannelOpen[int(argin)] = isChannelOpen
        self.push_change_event('StateCh%s'%argin,isChannelOpen)


#---- CloseCh command State Machine -----------------
    def is_CloseCh_allowed(self):
        if self.get_state() in [PyTango.DevState.OFF,
                                PyTango.DevState.FAULT,
                                PyTango.DevState.DISABLE]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    ChannelState command:
#
#    Description: 
#    argout: DevBoolean    
#------------------------------------------------------------------
    def ChannelState(self, argin):
        self.debug_stream("In %s::ChannelState()"%self.get_name())
        #    Add your own code here
        _channelDisplay = self.ask(self.instructionSet.query("channelDisplay",\
                                                    ch=argin)+"?")
        self.isChannelOpen[int(argin)] = bool(int(_channelDisplay))
        return self.isChannelOpen[int(argin)]


#---- ChannelState command State Machine -----------------
    def is_ChannelState_allowed(self):
        if self.get_state() in [PyTango.DevState.OFF,
                                PyTango.DevState.FAULT,
                                PyTango.DevState.DISABLE]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    ResetVisa command:
#
#    Description: 
#------------------------------------------------------------------
    def ResetVisa(self):
        self.debug_stream("In %s::ResetVisa()"%self.get_name())
        #    Add your own code here
        self.setVisaDS_reset()


#---- ResetVisa command State Machine -----------------
    def is_ResetVisa_allowed(self):
        if self.get_state() in [PyTango.DevState.ON,
                                PyTango.DevState.OFF,
                                PyTango.DevState.DISABLE]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    InitVisa command:
#
#    Description: 
#------------------------------------------------------------------
    def InitVisa(self):
        self.debug_stream("In %s::InitVisa()"%self.get_name())
        #    Add your own code here
        self.setVisaDS_init()


#---- InitVisa command State Machine -----------------
    def is_InitVisa_allowed(self):
        if self.get_state() in [PyTango.DevState.ON,
                                PyTango.DevState.OFF,
                                PyTango.DevState.DISABLE]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#==================================================================
#
#    FunctionGeneratorClass class definition
#
#==================================================================
class FunctionGeneratorClass(PyTango.DeviceClass):

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'NumChannels':
            [PyTango.DevShort,
            "This information is used to generate dynamically the number of spaces will be in much of the spectrum values.",
            [] ],
        'PyVisaDS':
            [PyTango.DevString,
            "The tango name of the PyVisaDS who is connected to the oscilloscope.",
            [] ],
        'logger_maxlen':
            [PyTango.DevLong,
            "A positive number to tune the number of characters of data to throw on the log file.",
            [] ],
        'LockInstrument':
            [PyTango.DevBoolean,
            "Lock the front panel of the instrument on the device start up.",
            [] ],
        }


    #    Command definitions
    cmd_list = {
        'Reset':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        'Start':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        'Stop':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        'Lock':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        'Unlock':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        'IDN':
            [[PyTango.DevVoid, ""],
            [PyTango.DevString, ""]],
        'CMD':
            [[PyTango.DevString, ""],
            [PyTango.DevString, ""],
            {
                'Display level':PyTango.DispLevel.EXPERT,
             } ],
        'OpenCh':
            [[PyTango.DevShort, ""],
            [PyTango.DevVoid, ""]],
        'CloseCh':
            [[PyTango.DevShort, ""],
            [PyTango.DevVoid, ""]],
        'ChannelState':
            [[PyTango.DevShort, ""],
            [PyTango.DevBoolean, ""]],
        'InitVisa':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        'ResetVisa':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        }


    #    Attribute definitions
    attr_list = {
        'click':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'beeper':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'lock':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'errorList':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ,10]],
        }


#------------------------------------------------------------------
#    FunctionGeneratorClass Constructor
#------------------------------------------------------------------
    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type(name);
        print "In FunctionGeneratorClass  constructor"

    def dyn_attr(self, dev_list):
        for dev in dev_list:
            dev.dyn_attr()

#==================================================================
#
#    FunctionGenerator class main method
#
#==================================================================
if __name__ == '__main__':
    try:
        py = PyTango.Util(sys.argv)
        py.add_TgClass(FunctionGeneratorClass,FunctionGenerator,'FunctionGenerator')

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed,e:
        print '-------> Received a DevFailed exception:',e
    except Exception,e:
        print '-------> An unforeseen exception occured....',e
